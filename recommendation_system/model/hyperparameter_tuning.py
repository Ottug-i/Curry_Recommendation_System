# -*- coding: utf-8 -*-
"""hyperparameter_tuning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_32S5aWH-LinrYJ_raXYY6d1r0UrInS4

# 새로운 유저의 레시피 평점 예측

## 전체 유저 프로필 만들기
"""

import pandas as pd

from sklearn.model_selection import train_test_split

"""# 전체 유저의 평점 예측과 모델 평가

## Lasso 모델 적용
"""

from sklearn.linear_model import Lasso

"""# 하이퍼 파라미터 튜닝"""

tuned_model = Lasso()
tuned_model

ratings = pd.read_csv('../persona/persona_ratings.csv', index_col = 'id')

from sklearn.model_selection import RandomizedSearchCV
from scipy.stats import uniform as sp_rand

from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score, make_scorer

param_grid = {'alpha': sp_rand()} # 0~ 1.0 사이에서 모든 숫자를 동일한 확률로 하여 랜덤 선택

rsearch = RandomizedSearchCV(estimator=tuned_model, param_distributions=param_grid, n_iter=200, cv=20, random_state=42, scoring=make_scorer(r2_score))

genres = pd.read_csv('../recipe/genres.csv', index_col='id')
ratings = pd.merge(ratings, genres, how='outer', on='id')

train, test = train_test_split(ratings, random_state=42, test_size=.1)

# Lasso 모델을 기준으로 한 새로운 user profile 만들기
user_profile_list = [] # 전체 유저 프로필 리스트
alpha_list = [] # 알파값 리스트

for userId in train['userId'].unique():
  user = train[train['userId'] == userId]
  print(user)
  X_train = user[genres.columns] # feature, X
  y_train = user['rating'] # label, y

  # 모델 학습
  param_grid = {'alpha': sp_rand()} # 0~ 1.0 사이에서 모든 숫자를 동일한 확률로 하여 랜덤 선택
  rsearch = RandomizedSearchCV(estimator=tuned_model, param_distributions=param_grid, n_iter=200, cv=20, random_state=42, scoring=make_scorer(r2_score))
  rsearch.fit(X_train, y_train)

  user_profile_list.append([rsearch.best_estimator_.coef_, *rsearch.best_estimator_.coef_])
  alpha_list.append(rsearch.best_estimator_)

# 보기 쉽게끔 list -> 표
user_profile= pd.DataFrame(user_profile_list,
                           index=train['userId'].unique(),
                           columns=['intercept', *genres.columns])

# 유저 프로필의 값 실수형 형태로 포맷
pd.set_option('float_format', '{:f}'.format)

user_profile.sample(5)

alpha_list